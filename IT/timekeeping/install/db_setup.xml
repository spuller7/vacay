<DatabaseSetup>
	<Commands>
		<Command>set character set utf8;</Command>
		<Command canFail='1'>drop database timekeeping;</Command>
		<Command>create database timekeeping;</Command>
		<Command>grant all on timekeeping.* to 'timekeeping'@'localhost' identified by 'doofus';</Command>
		<Command>flush privileges;</Command>
		<Command>use timekeeping;</Command>
		<Command>CREATE TABLE Users (
			UserID INT NOT NULL AUTO_INCREMENT,
			Username VARCHAR(32) CHARACTER SET Latin1 NOT NULL COLLATE latin1_bin,
			PasswordHash VARCHAR(32) CHARACTER SET Latin1 NOT NULL,
			FullName VARCHAR(64) NOT NULL,
			State ENUM('active', 'terminated', 'suspended'),
			PartTime BOOL DEFAULT FALSE,
			CreateDate TIMESTAMP NOT NULL DEFAULT 0,
			LastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			PRIMARY KEY (UserID)
			);</Command>
		<Command>create table RoleDescriptions
		(
			Role VARCHAR(32) CHARACTER SET Latin1 UNIQUE NOT NULL COLLATE latin1_bin,
			Description VARCHAR(64) CHARACTER SET Latin1 NOT NULL,
			PRIMARY KEY ( Role )
		);</Command>
		<Command>CREATE TABLE Roles (		
			UserID INT NOT NULL,
			Role VARCHAR(32) CHARACTER SET Latin1 NOT NULL COLLATE latin1_bin,
			CreateDate TIMESTAMP NOT NULL DEFAULT 0,
			LastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			FOREIGN KEY (Role) REFERENCES RoleDescriptions(Role),
			PRIMARY KEY (UserID, Role)
			);</Command>
		<Command>INSERT INTO Users VALUES (0, 'QSAdmin', md5('QSAdmin:timekeeping:doofus'), 'System Administrator', 1, false, Now(), Now() );</Command>
		<Command>insert into RoleDescriptions values ('ADMINISTRATOR', 'Master Administrator Privilege');</Command>
		<Command>insert into RoleDescriptions values ('TRACKER', 'Tracks hours');</Command>
		<Command>insert into RoleDescriptions values ('VIEW_PRIVATE', 'View private projects');</Command>
		<Command>insert into RoleDescriptions values ('REPORTER', 'Generates and finalizes Reports');</Command>
		<Command>insert into RoleDescriptions values ('USER_MANAGER', 'Manages users and groups');</Command>
		<Command>insert into RoleDescriptions values ('TRACKER_MANAGER', 'Lock/unlock Timeslots');</Command>
		<Command>insert into RoleDescriptions values ('REPORT_MANAGER', 'Manages notifications');</Command>
		<Command>INSERT INTO Roles VALUES ((Select UserID from Users where Username='QSAdmin'), 'ADMINISTRATOR', Now(), Now() );</Command>
		<Command>CREATE TABLE Groups (
			GroupID INT NOT NULL AUTO_INCREMENT,
			GroupName VARCHAR(32) CHARACTER SET Latin1 NOT NULL COLLATE latin1_bin,
			Authorizer INT NOT NULL,
			CreateDate TIMESTAMP NOT NULL DEFAULT 0,
			LastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			FOREIGN KEY (Authorizer) REFERENCES Users(UserID),
			PRIMARY KEY (GroupID)
			);</Command>
		<Command>CREATE TABLE GroupMembership (		
			GroupID INT NOT NULL,
			UserID INT NOT NULL,
			CreateDate TIMESTAMP NOT NULL DEFAULT 0,
			LastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			FOREIGN KEY (GroupID) REFERENCES Groups(GroupID),
			PRIMARY KEY (GroupID, UserID)
			);</Command>
		<Command>CREATE TRIGGER Users_before_delete
		BEFORE DELETE ON Users
		FOR EACH ROW
		BEGIN
			DELETE FROM Roles WHERE UserID = OLD.UserID;
			DELETE FROM GroupMembership WHERE UserID = OLD.UserID;
		END;
		</Command>
		<Command>INSERT INTO Groups VALUES (0,'Default', (Select UserID from Users where Username='QSAdmin'), Now(), Now() );</Command>
		<Command>INSERT INTO GroupMembership VALUES ((Select UserID from Users where Username='QSAdmin'), (Select GroupID from Groups where Groupname='Default'), Now(), Now() );</Command>
		<Command>CREATE TABLE GroupAuthorizers (		
			GroupID INT NOT NULL,
			UserID INT NOT NULL,
			CreateDate TIMESTAMP NOT NULL DEFAULT 0,
			LastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			FOREIGN KEY (GroupID) REFERENCES Groups(GroupID),
			PRIMARY KEY (GroupID, UserID)
			);</Command>
		<Command>CREATE TRIGGER Groups_before_delete
		BEFORE DELETE ON Groups
		FOR EACH ROW
		BEGIN
			DELETE FROM GroupMembership WHERE GroupID = OLD.GroupID;
			DELETE FROM GroupAuthorizers WHERE GroupID = OLD.GroupID;
		END;
		</Command>
		<Command>CREATE TABLE ProjectCodeCategory(
			CatID INT NOT NULL AUTO_INCREMENT,
			CatName VARCHAR(18) CHARACTER SET Latin1 NOT NULL COLLATE latin1_bin,
			SortOrder INT,
			PRIMARY KEY (CatID)
			);</Command>
		<Command>CREATE TABLE ProjectCodes (
			ProjectID INT NOT NULL AUTO_INCREMENT,
			CatID INT NOT NULL DEFAULT 0,
			ProjectCode VARCHAR (12) CHARACTER SET Latin1 UNIQUE NOT NULL COLLATE latin1_bin,
			State ENUM('active', 'inactive', 'suspended'),
			Type ENUM('public', 'private'),
			FOREIGN KEY (CatID) REFERENCES ProjectCodeCategory(CatID),
			PRIMARY KEY (ProjectID)
			);</Command>
		<Command>CREATE TRIGGER Projects_before_delete_cat
		BEFORE DELETE ON ProjectCodeCategory
		FOR EACH ROW
		BEGIN
			DELETE FROM ProjectCodes WHERE CatID = OLD.CatID;
		END;
		</Command>
		<Command>CREATE TABLE ProjectMembership (
			UserID INT NOT NULL,
			ProjectID INT NOT NULL,
			FOREIGN KEY (ProjectID) REFERENCES ProjectCodes(ProjectID),
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			PRIMARY KEY (UserID, ProjectID)
			);</Command>
		<Command>CREATE TRIGGER Codes_before_delete
		BEFORE DELETE ON ProjectCodes
		FOR EACH ROW
		BEGIN
			DELETE FROM ProjectMembership WHERE ProjectID = OLD.ProjectID;
		END;
		</Command>
		<Command>CREATE TABLE TimeEntryRecord (
			UserID INT NOT NULL,
			Date DATE NOT NULL DEFAULT 0,
			Period TINYINT NOT NULL,
			ProjectID INT NOT NULL,
			State ENUM('open', 'retracted', 'pending', 'authorized', 'rejected', 'finalized'),
			ChangeUserID INT NOT NULL DEFAULT 1,
			ChangeDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			FOREIGN KEY (ChangeUserID) REFERENCES Users(UserID),
			FOREIGN KEY (ProjectID) REFERENCES ProjectCodes(ProjectID),
			PRIMARY KEY (UserID, Date, Period)
			);</Command>
		<Command>CREATE TABLE TimeEntryNote (
			UserID INT NOT NULL,
			Date DATE NOT NULL DEFAULT 0,
			Note TINYTEXT,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			PRIMARY KEY (UserID, Date)
			);</Command>
		<Command>CREATE TABLE PeriodEntryNote (
			UserID INT NOT NULL,
			PayPeriod TINYINT NOT NULL,
			Year YEAR(4) NOT NULL,
			Note TINYTEXT,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			PRIMARY KEY (UserID, PayPeriod, Year)
			);</Command>
		<Command>CREATE TABLE AuditRecord (
			UserID INT NOT NULL,
			Date DATE NOT NULL DEFAULT 0,
			Period TINYINT NOT NULL,
			ProjectID INT NOT NULL,
			State ENUM('open', 'retracted', 'pending', 'authorized', 'rejected', 'finalized'),
			ChangeUserID INT NOT NULL,
			ChangeDate TIMESTAMP NOT NULL,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			FOREIGN KEY (ChangeUserID) REFERENCES Users(UserID),
			FOREIGN KEY (ProjectID) REFERENCES ProjectCodes(ProjectID)
			);</Command>
		<Command>CREATE TRIGGER TimeEntryRecord_after_insert
		AFTER UPDATE ON TimeEntryRecord
		FOR EACH ROW
		BEGIN
			IF OLD.State != NEW.State THEN
				INSERT INTO AuditRecord VALUES (OLD.UserID, OLD.Date, OLD.Period, OLD.ProjectID, OLD.State, OLD.ChangeUserID, OLD.ChangeDate );
			END IF;
		END;</Command>
		<Command>CREATE TRIGGER TimeEntryRecord_before_delete
		BEFORE DELETE ON TimeEntryRecord
		FOR EACH ROW
		BEGIN
                INSERT INTO AuditRecord VALUES (OLD.UserID, OLD.Date, OLD.Period, OLD.ProjectID, OLD.State, OLD.ChangeUserID, OLD.ChangeDate );
		END;</Command>
		<Command>CREATE TABLE CompTime (
			UserID INT NOT NULL,
			PayPeriod TINYINT NOT NULL,
			Year YEAR(4) NOT NULL,
			PeriodAccrument INT NOT NULL DEFAULT 0,
			LastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			FOREIGN KEY (UserID) REFERENCES Users(UserID),
			PRIMARY KEY (UserID, PayPeriod, Year)
			);</Command>
	</Commands>
</DatabaseSetup>
